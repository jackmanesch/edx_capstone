mu <- mean(train$HLA_match)
b_HLA_match <- train %>%
group_by(HLA_match) %>%
summarize(b_HLA_match = mean(survival_time - mu))
predicted_b_HLA_match <- mu + test %>%
left_join(b_HLA_match, by='HLA_match') %>%
pull(b_HLA_match)
b_HLA_match_rmse<-RMSE(predicted_b_HLA_match, test$survival_time)
b_HLA_match_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match"),
RMSE =  c(naive_rmse,b_HLA_match_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Adding Antigen Effect
b_antigen <-train %>% left_join(b_HLA_match, by = "HLA_match") %>% group_by(antigen) %>%
summarize(b_antigen = mean(survival_time - mu - b_HLA_match))
ggplot(b_antigen, aes(x = b_antigen)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black") +
labs(title = "Distribution of Antigen Effects", x = "b__antigen", y = "Frequency")+
theme_minimal()
predicted_b_antigen <- test %>%
left_join(b_HLA_match, by='HLA_match') %>%
left_join(b_antigen, by='antigen')%>%
mutate(predictions = mu + b_HLA_match + b_antigen) %>% .$predictions
b_antigen_rmse<-RMSE(test$survival_time, predicted_b_antigen)
b_antigen_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Adding Antigen Effect
b_antigen <-train %>% left_join(b_HLA_match, by = "HLA_match") %>% group_by(antigen) %>%
summarize(b_antigen = mean(survival_time - mu - b_HLA_match))
predicted_b_antigen <- test %>%
left_join(b_HLA_match, by='HLA_match') %>%
left_join(b_antigen, by='antigen')%>%
mutate(predictions = mu + b_HLA_match + b_antigen) %>% .$predictions
b_antigen_rmse<-RMSE(test$survival_time, predicted_b_antigen)
b_antigen_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Adding Relapse status
b_relapse <-train %>% left_join(b_antigen, by = "antigen") %>%
left_join(b_HLA_match, by = "HLA_match")%>%
group_by(relapse) %>%
summarize(b_relapse = mean(survival_time - mu - b_HLA_match - b_antigen))
predicted_b_relapse <- test %>%
left_join(b_HLA_match, by='HLA_match') %>%
left_join(b_antigen, by='antigen')%>%
left_join(b_relapse, by='relapse')%>%
mutate(predictions = mu + b_HLA_match + b_antigen + b_relapse) %>% .$predictions
b_relapse_rmse<-RMSE(test$survival_time, predicted_b_relapse, na.rm = TRUE)
b_relapse_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Adding time to acute GVHD
# Time to development of acute graft versus host disease stage III or IV
b_time_to_acute_GvHD <-train %>% left_join(b_relapse, by = "relapse") %>%
left_join(b_antigen, by = "antigen") %>%
left_join(b_HLA_match, by = "HLA_match")%>%
group_by(time_to_acute_GvHD_III_IV) %>%
summarize(b_time_to_acute_GvHD = mean(survival_time - mu - b_HLA_match - b_antigen - b_relapse))
ggplot(b_time_to_acute_GvHD, aes(x = b_time_to_acute_GvHD)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black") +
labs(title = "Distribution of Time to Acute GvHD Effects", x = "b_time_to_acute_GvHD", y = "Frequency")+
theme_minimal()
predicted_b_time_to_acute_GvHD <- test %>%
left_join(b_HLA_match, by='HLA_match') %>%
left_join(b_antigen, by='antigen')%>%
left_join(b_relapse, by='relapse')%>%
left_join(b_time_to_acute_GvHD, by = "time_to_acute_GvHD_III_IV")%>%
mutate(predictions = mu + b_HLA_match + b_antigen + b_relapse + b_time_to_acute_GvHD) %>% .$predictions
b_time_to_acute_GvHD_rmse<-RMSE(test$survival_time, predicted_b_time_to_acute_GvHD, na.rm = TRUE)
b_time_to_acute_GvHD_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Adding time to acute GVHD
b_time_to_acute_GvHD <-train %>% left_join(b_relapse, by = "relapse") %>%
left_join(b_antigen, by = "antigen") %>%
left_join(b_HLA_match, by = "HLA_match")%>%
group_by(time_to_acute_GvHD_III_IV) %>%
summarize(b_time_to_acute_GvHD = mean(survival_time - mu - b_HLA_match - b_antigen - b_relapse))
ggplot(b_time_to_acute_GvHD, aes(x = b_time_to_acute_GvHD)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black") +
labs(title = "Distribution of Time to Acute GvHD Effects", x = "b_time_to_acute_GvHD", y = "Frequency")+
theme_minimal()
predicted_b_time_to_acute_GvHD <- test %>%
left_join(b_HLA_match, by='HLA_match') %>%
left_join(b_antigen, by='antigen')%>%
left_join(b_relapse, by='relapse')%>%
left_join(b_time_to_acute_GvHD, by = "time_to_acute_GvHD_III_IV")%>%
mutate(predictions = mu + b_HLA_match + b_antigen + b_relapse + b_time_to_acute_GvHD) %>% .$predictions
b_time_to_acute_GvHD_rmse<-RMSE(test$survival_time, predicted_b_time_to_acute_GvHD, na.rm = TRUE)
b_time_to_acute_GvHD_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Adding time to acute GVHD
b_time_to_acute_GvHD <-train %>% left_join(b_relapse, by = "relapse") %>%
left_join(b_antigen, by = "antigen") %>%
left_join(b_HLA_match, by = "HLA_match")%>%
group_by(time_to_acute_GvHD_III_IV) %>%
summarize(b_time_to_acute_GvHD = mean(survival_time - mu - b_HLA_match - b_antigen - b_relapse))
predicted_b_time_to_acute_GvHD <- test %>%
left_join(b_HLA_match, by='HLA_match') %>%
left_join(b_antigen, by='antigen')%>%
left_join(b_relapse, by='relapse')%>%
left_join(b_time_to_acute_GvHD, by = "time_to_acute_GvHD_III_IV")%>%
mutate(predictions = mu + b_HLA_match + b_antigen + b_relapse + b_time_to_acute_GvHD) %>% .$predictions
b_time_to_acute_GvHD_rmse<-RMSE(test$survival_time, predicted_b_time_to_acute_GvHD, na.rm = TRUE)
b_time_to_acute_GvHD_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Fit the model on the training set
set.seed(1701)
model <- train(
survival_time ~., data = train, method = "knn",
trControl = trainControl("cv", number = 10),
preProcess = c("center","scale"),
tuneLength = 10
)
# Plot model error RMSE vs different values of k
plot(model)
# Best tuning parameter k that minimize the RMSE
model$bestTune
# Make predictions on the test data
predictions <- model %>% predict(test)
head(predictions)
# Compute the prediction error RMSE
kNN_rmse<-RMSE(predictions, test$survival_time)
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD",
"kNN"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse, kNN_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD",
"kNN"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse, kNN_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Train the GBM model
gbm_model <- gbm(
formula = survival_time ~ .,
data = train,
distribution = "gaussian",  # Specify distribution for regression
n.trees = 100,  # Number of trees in the ensemble
interaction.depth = 3,  # Maximum depth of each tree
shrinkage = 0.1,  # Learning rate (also known as shrinkage)
bag.fraction = 0.5,  # Fraction of observations to use for each tree (bagging)
cv.folds = 5  # Number of cross-validation folds
)
# Make predictions on the test data
predictions <- predict(gbm_model, newdata = test, n.trees = 100)
# Evaluate the model
GBM_rmse <- RMSE(predictions, test$survival_time)
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD",
"kNN",
"GBM"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse, kNN_rmse, GBM_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Use the Random Forest Approach
model <- randomForest(survival_time ~ ., data = train, ntree = 1000)
predictions <- predict(model, newdata = test)
varImpPlot(model)
plot(test$survival_time, predictions, xlab = "Actual", ylab = "Predicted", main = "Actual vs. Predicted")
# Compute the prediction error RMSE
RF_rmse <- RMSE(predictions, test$survival_time)
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD",
"kNN",
"randomForest Model"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse, kNN_rmse, RF_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Use the Random Forest Approach
model <- randomForest(survival_time ~ ., data = train, ntree = 1000)
predictions <- predict(model, newdata = test)
varImpPlot(model)
# Use the Random Forest Approach
model <- randomForest(survival_time ~ ., data = train, ntree = 1000)
predictions <- predict(model, newdata = test)
varImpPlot(model)
varImpPlot(model)
plot(test$survival_time, predictions, xlab = "Actual", ylab = "Predicted", main = "Actual vs. Predicted")
# Compute the prediction error RMSE
RF_rmse <- RMSE(predictions, test$survival_time)
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD",
"kNN",
"randomForest Model"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse, kNN_rmse, RF_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# load packages #
library(openxlsx)
library(dplyr)
library(lubridate)
library(ggplot2)
library(reshape2)
library(caret)
library(gbm)
library(randomForest)
# data from https://www.kaggle.com/datasets/adamgudys/bone-marrow-transplant-children
# Note that this directory must be set to the location where the data file is stored
dir<-"/Users/jackesch/projects/Bone_Marrow_Transplant_ML/"
setwd(dir)
data <- read.csv("bone_marrow_dataset.csv")
head(data)
# Apply naive model
mu_hat <- mean(train$survival_time)
mu_hat
naive_rmse <- RMSE(train$survival_time, mu_hat)
naive_rmse
results_table <-tibble(Model_Type = "Naive RMSE", RMSE = naive_rmse) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
kable(results_table, format = "markdown")
knitr::opts_chunk$set(echo = TRUE, fig.show='hold')
# load packages #
library(openxlsx)
library(dplyr)
library(lubridate)
library(ggplot2)
library(reshape2)
library(caret)
library(gbm)
library(randomForest)
library(knitr)
# data from https://www.kaggle.com/datasets/adamgudys/bone-marrow-transplant-children
# Note that this directory must be set to the location where the data file is stored
dir<-"/Users/jackesch/projects/Bone_Marrow_Transplant_ML/"
setwd(dir)
data <- read.csv("bone_marrow_dataset.csv")
head(data)
# We can begin by inspecting the data for missing values.
# Sum the number of rows with NA values by column
na_counts <- colSums(is.na(data))
# Print the result
print(na_counts)
# Remove extensive_chronic_GvHD column
data <- data[, !names(data) %in% "extensive_chronic_GvHD"]
# Remove extensive_chronic_GvHD column
data <- data[, !names(data) %in% "extensive_chronic_GvHD"]
# Remove all rows with missing values in any column
data <- data[complete.cases(data), ]
# Round donor age to nearest year
data$donor_age <- round(data$donor_age)
# Round recipient age to nearest year
data$recipient_age <- round(data$recipient_age)
# Identify character variables
char_vars <- sapply(data, is.character)
# Convert character variables to factors
data[char_vars] <- lapply(data[char_vars], factor)
str(data)
# Select only numeric variables
numeric_data <- select(data, where(is.numeric))
# Compute the correlation matrix
correlation_matrix <- cor(numeric_data, use = "complete.obs")
# Mask the lower triangle of the correlation matrix
correlation_matrix[lower.tri(correlation_matrix, diag = TRUE)] <- NA
# Plot heatmap
ggplot(data = reshape2::melt(correlation_matrix, na.rm = TRUE), aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1)) +
coord_fixed()
perfect_correlation_indices <- which(abs(correlation_matrix) == 1, arr.ind = TRUE)
# Print indices and corresponding variables
perfect_correlation_vars <- colnames(correlation_matrix)[perfect_correlation_indices[, 1]]
perfect_correlation_pairs <- rownames(correlation_matrix)[perfect_correlation_indices[, 2]]
perfect_correlation <- data.frame(Variable1 = perfect_correlation_vars,
Variable2 = perfect_correlation_pairs)
print(perfect_correlation)
# Plot survival status by patient sex
ggplot(data, aes(x = factor(survival_status), fill = recipient_gender)) +
geom_bar(position = "dodge") +
scale_fill_manual(values = c("steelblue", "coral1"))+
labs(x = "Survival Status", y = "Count", fill = "Sex") +
scale_x_discrete(labels = c("Survived", "Deceased")) +
ggtitle("Survival Status by Patient Sex")
# Mean survival time by recipient sex
ggplot(data, aes(x = recipient_gender, y = survival_time, fill = recipient_gender)) +
geom_boxplot(color = "black") +
scale_fill_manual(values = c("coral1", "steelblue"), labels = c("Female", "Male"))+
labs(title = "Mean Survival Time by Recipient Sex",
x = "Recipient Sex",
y = "Survival Time (days)")+
theme_minimal()+
theme(legend.position = "none")
# Density plot of survival by HLA Match
# Compatibility of antigens of the main histocompatibility complex of the donor and the recipient of hematopoietic stem cells (10/10, 9/10, 8/10, 7/10)
ggplot(data, aes(x = HLA_match, fill = factor(survival_status))) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("darkseagreen1", "cornsilk4"), labels = c("Survived", "Deceased")) +
labs(x = "HLA Match", y = "Density", fill = "Survival Status") +
ggtitle("Density Plot of Survival Status by HLA Match")
# Density plot of survival by antigen
# In how many antigens there is a difference between the donor nad the recipient (0-3)
ggplot(data, aes(x = antigen, fill = factor(survival_status))) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("darkseagreen1", "cornsilk4"), labels = c("Survived", "Deceased"))+
labs(x = "Antigen Differences", y = "Density", fill = "Survival Status") +
ggtitle("Density Plot of Survival Status by Antigen Differences")
# Density plot of survival by donor age
ggplot(data, aes(x = donor_age, fill = factor(survival_status))) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("darkseagreen1", "cornsilk4"), labels = c("Survived", "Deceased"))+
labs(x = "Donor Age", y = "Density", fill = "Survival Status") +
ggtitle("Density Plot of Survival Status by Donor Age")
# Survival time by patient age
survival_by_patient_age <- data %>%
group_by(recipient_age) %>%
summarize(mean_survival = mean(survival_time))
ggplot(survival_by_patient_age, aes(x = recipient_age, y = mean_survival)) +
geom_point(stat = "identity", fill = "steelblue", color = "black") +
geom_smooth(method = "loess", se = TRUE, color = "coral1") +
labs(title = "Mean Survival by Patient Age",
x = "Patient Age",
y = "Mean Survival (days)")+
theme_minimal()
# Survival time by donor age
survival_by_donor_age <- data %>%
group_by(donor_age) %>%
summarize(mean_survival = mean(survival_time))
ggplot(survival_by_donor_age, aes(x =donor_age, y = mean_survival)) +
geom_point(stat = "identity", fill = "steelblue", color = "black") +
geom_smooth(method = "loess", se = TRUE, color = "coral1") +
labs(title = "Mean Survival by Donor Age",
x = "Donor Age",
y = "Mean Survival (days)")+
theme_minimal()
set.seed(1701, sample.kind="Rounding")
test_index <-createDataPartition(y = data$survival_status, times = 1, p = 0.2, list = F)
train <-data[-test_index,]
test <-data[test_index,]
# Apply naive model
mu_hat <- mean(train$survival_time)
mu_hat
naive_rmse <- RMSE(train$survival_time, mu_hat)
naive_rmse
results_table <-tibble(Model_Type = "Naive RMSE", RMSE = naive_rmse) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
kable(results_table, format = "markdown")
mu <- mean(train$HLA_match)
b_HLA_match <- train %>%
group_by(HLA_match) %>%
summarize(b_HLA_match = mean(survival_time - mu))
predicted_b_HLA_match <- mu + test %>%
left_join(b_HLA_match, by='HLA_match') %>%
pull(b_HLA_match)
b_HLA_match_rmse<-RMSE(predicted_b_HLA_match, test$survival_time)
b_HLA_match_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match"),
RMSE =  c(naive_rmse,b_HLA_match_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Adding Antigen Effect
b_antigen <-train %>% left_join(b_HLA_match, by = "HLA_match") %>% group_by(antigen) %>%
summarize(b_antigen = mean(survival_time - mu - b_HLA_match))
predicted_b_antigen <- test %>%
left_join(b_HLA_match, by='HLA_match') %>%
left_join(b_antigen, by='antigen')%>%
mutate(predictions = mu + b_HLA_match + b_antigen) %>% .$predictions
b_antigen_rmse<-RMSE(test$survival_time, predicted_b_antigen)
b_antigen_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Adding Relapse status
b_relapse <-train %>% left_join(b_antigen, by = "antigen") %>%
left_join(b_HLA_match, by = "HLA_match")%>%
group_by(relapse) %>%
summarize(b_relapse = mean(survival_time - mu - b_HLA_match - b_antigen))
predicted_b_relapse <- test %>%
left_join(b_HLA_match, by='HLA_match') %>%
left_join(b_antigen, by='antigen')%>%
left_join(b_relapse, by='relapse')%>%
mutate(predictions = mu + b_HLA_match + b_antigen + b_relapse) %>% .$predictions
b_relapse_rmse<-RMSE(test$survival_time, predicted_b_relapse, na.rm = TRUE)
b_relapse_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Adding time to acute GVHD
b_time_to_acute_GvHD <-train %>% left_join(b_relapse, by = "relapse") %>%
left_join(b_antigen, by = "antigen") %>%
left_join(b_HLA_match, by = "HLA_match")%>%
group_by(time_to_acute_GvHD_III_IV) %>%
summarize(b_time_to_acute_GvHD = mean(survival_time - mu - b_HLA_match - b_antigen - b_relapse))
predicted_b_time_to_acute_GvHD <- test %>%
left_join(b_HLA_match, by='HLA_match') %>%
left_join(b_antigen, by='antigen')%>%
left_join(b_relapse, by='relapse')%>%
left_join(b_time_to_acute_GvHD, by = "time_to_acute_GvHD_III_IV")%>%
mutate(predictions = mu + b_HLA_match + b_antigen + b_relapse + b_time_to_acute_GvHD) %>% .$predictions
b_time_to_acute_GvHD_rmse<-RMSE(test$survival_time, predicted_b_time_to_acute_GvHD, na.rm = TRUE)
b_time_to_acute_GvHD_rmse
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Fit the model on the training set
set.seed(1701)
model <- train(
survival_time ~., data = train, method = "knn",
trControl = trainControl("cv", number = 10),
preProcess = c("center","scale"),
tuneLength = 10
)
# Plot model error RMSE vs different values of k
plot(model)
# Best tuning parameter k that minimize the RMSE
model$bestTune
# Make predictions on the test data
predictions <- model %>% predict(test)
head(predictions)
# Compute the prediction error RMSE
kNN_rmse<-RMSE(predictions, test$survival_time)
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD",
"kNN"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse, kNN_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Train the GBM model
gbm_model <- gbm(
formula = survival_time ~ .,
data = train,
distribution = "gaussian",  # Specify distribution for regression
n.trees = 100,  # Number of trees in the ensemble
interaction.depth = 3,  # Maximum depth of each tree
shrinkage = 0.1,  # Learning rate (also known as shrinkage)
bag.fraction = 0.5,  # Fraction of observations to use for each tree (bagging)
cv.folds = 5  # Number of cross-validation folds
)
# Make predictions on the test data
predictions <- predict(gbm_model, newdata = test, n.trees = 100)
# Evaluate the model
GBM_rmse <- RMSE(predictions, test$survival_time)
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD",
"kNN",
"GBM"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse, kNN_rmse, GBM_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
# Use the Random Forest Approach
model <- randomForest(survival_time ~ ., data = train, ntree = 1000)
predictions <- predict(model, newdata = test)
varImpPlot(model)
plot(test$survival_time, predictions, xlab = "Actual", ylab = "Predicted", main = "Actual vs. Predicted")
# Compute the prediction error RMSE
RF_rmse <- RMSE(predictions, test$survival_time)
results_table <-tibble(Model_Type = c("Naive RMSE", "HLA_match",
"HLA_match + antigen",
"HLA_match + antigen + relapse",
"HLA_match + antigen + relapse + time to acute GvHD",
"kNN",
"randomForest Model"),
RMSE =  c(naive_rmse, b_HLA_match_rmse, b_antigen_rmse, b_relapse_rmse,b_time_to_acute_GvHD_rmse, kNN_rmse, RF_rmse)) %>%
mutate(RMSE = sprintf("%0.4f", RMSE))
results_table
